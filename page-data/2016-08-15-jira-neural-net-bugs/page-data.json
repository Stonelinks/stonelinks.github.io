{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2016-08-15-jira-neural-net-bugs/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Stonelinks"}},"markdownRemark":{"id":"6eab96b5-7211-5c66-b2c2-d92c7e556b3a","excerpt":"Ever wanted to piss off your team by generating plausible (but fake) sounding bug reports? Then look no further! This guide will walk you through exporting all…","html":"<p>Ever wanted to piss off your team by generating plausible (but fake) sounding bug reports? Then look no further! This guide will walk you through exporting all your bugs from JIRA and using <a href=\"https://github.com/jcjohnson/torch-rnn\">torch-rnn</a> to generate nonsense like this:</p>\n<p>You may need to swap URLs / field names as needed depending on your exact JIRA setup.</p>\n<h2>Step 1: Download all your bugs to your hard drive</h2>\n<p>JIRA isn’t too keen on exporting every single bug in one go, so we need to batch download them. Go to the JIRA issues search and search for <code class=\"language-text\">type = bug</code> to get on all your bugs. Make sure to show the “Description” field (the “Columns” dropdown on the right).</p>\n<p>Open up the javascript console for your browser (CTRL + Shift + J in chrome) and paste the blow in to batch download your bugs as excel spreadsheets. You may have to adjust some variables at the top as needed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numberOfPages <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token keyword\">var</span> baseUrl <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"http://jira/sr/jira.issueviews:searchrequest-excel-current-fields/temp/SearchRequest.xls?jqlQuery=type+%3D+bug&amp;tempMax=1000\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">downloadURI</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uri</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n  link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> uri\n  link<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">downloadURI</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberOfPages<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> baseUrl <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;pager/start=\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"001\"</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"download\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">downloadURI</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This should download a bunch of spreadsheets named <code class=\"language-text\">JIRA.xls</code>, <code class=\"language-text\">JIRA (1).xls</code>, …<code class=\"language-text\">JIRA (n).xls</code> to your Downloads folder.</p>\n<h2>Step 2: Merge all bugs into a single CSV file</h2>\n<p>We need a giant CSV of all these bugs. There is probably a better way to do this, but I merged them all manually in google docs:</p>\n<ul>\n<li>Create a google docs spreadsheet, I called mine “JIRA Bug Dump”</li>\n<li>Open up as many tabs as you have spreadsheets that got downloaded in Step 1 (trust me on this)</li>\n<li>For each tab, go to File -> Import -> Upload and upload <code class=\"language-text\">JIRA (i).xls</code> (where <code class=\"language-text\">i</code> is the index of the sheet)</li>\n<li>Insert the upload as a new sheet in the document</li>\n<li>Once all sheets are inserted, create a new blank sheet (this is your “master” sheet)</li>\n<li>Copy in the column headings from one of the sheets</li>\n<li>Copy in the bugs from all the other sheets into this blank sheet (watch out for the extra cell JIRA creates at the end of each sheet)</li>\n<li>Export this “master” sheet as a CSV, I named mine <code class=\"language-text\">dump.csv</code></li>\n</ul>\n<p>If anyone knows a more efficient way to do this, by all means go ahead!</p>\n<h2>Step 3: Generate markdown corpus</h2>\n<p>I used <code class=\"language-text\">node</code> to generate a large markdown document from <code class=\"language-text\">dump.csv</code>. For below to work, make sure to <code class=\"language-text\">npm i jira2md csvtojson</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// for markdown generation:</span>\n<span class=\"token keyword\">var</span> j2m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jira2md\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> Converter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"csvtojson\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Converter\n<span class=\"token keyword\">var</span> csvConverter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Converter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  workerNum<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// record_parsed will be emitted each csv row being processed</span>\ncsvConverter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"record_parsed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">jsonObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"Key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parsed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// end_parsed will be emitted once parsing finished</span>\ncsvConverter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end_parsed\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">jsonArray</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// uncomment below to to test on first 10 items</span>\n  <span class=\"token comment\">// var outputMarkdown = jsonArray.slice(0, 10).map(function (row) {</span>\n  <span class=\"token keyword\">var</span> outputMarkdown <span class=\"token operator\">=</span> jsonArray\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n      r <span class=\"token operator\">+=</span> <span class=\"token string\">\"## \"</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">\"Key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">]</span>\n      r <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\\n\"</span>\n      <span class=\"token keyword\">var</span> headerKeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"Priority\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Component\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"FixVersion\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Reporter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Assignee\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n      headerKeys<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        r <span class=\"token operator\">+=</span> <span class=\"token string\">\"- **\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\":** \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> row<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"*None*\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">\"Description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        r <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> j2m<span class=\"token punctuation\">.</span><span class=\"token function\">to_markdown</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">\"Description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n-------\\n\\n\"</span><span class=\"token punctuation\">)</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./bugs.md\"</span><span class=\"token punctuation\">,</span> outputMarkdown<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// read from file</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./dump.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>csvConverter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Running this should generate <code class=\"language-text\">bugs.md</code>, which should be a monster concatenation of every bug ever filed (mine was 4.4MB).</p>\n<h2>Step 4: Preprocess, train and sample your RNN</h2>\n<p>You need to install <a href=\"https://github.com/jcjohnson/torch-rnn\">torch-rnn</a> for this. You can install straight from that repo, but since I’m on linux I opted for the docker version: <a href=\"https://github.com/crisbal/docker-torch-rnn\">docker-torch-rnn</a>. These instructions assume the docker version of <code class=\"language-text\">torch-rnn</code>.</p>\n<p>Spin up and get a console in the container</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run --rm -ti -v `pwd`:/data crisbal/torch-rnn:base bash</code></pre></div>\n<p>Preprocess data. This is a one-time thing.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python scripts/preprocess.py \\\n--input_txt /data/bugs.md \\\n--output_h5 /data/bugs.h5 \\\n--output_json /data/bugs.json</code></pre></div>\n<p>Train the network. This part took me two days, but the checkpoints saved periodically can still be sampled.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time th train.lua \\\n-input_h5 /data/bugs.h5 \\\n-input_json /data/bugs.json \\\n-gpu -1 \\\n-checkpoint_every 1000</code></pre></div>\n<p>Sample the network. Change length and checkpoint around to sample from different checkpoints / character lengths. Access the markdown output on your host machine in whatever path the container was started.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">th sample.lua -gpu -1 -length 18000 -checkpoint cv/checkpoint_67900.t7 > /data/rnn_out.md</code></pre></div>","frontmatter":{"title":"Neural Network Bug Generator","date":"August 15, 2016","description":null}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":{"fields":{"slug":"/2016-10-27-leaflet-google-maps-experiment/"},"frontmatter":{"title":"Leaflet Google Maps"}}},"pageContext":{"id":"6eab96b5-7211-5c66-b2c2-d92c7e556b3a","previousPostId":"a4b19b0c-5ab9-5474-89f2-fd0dc3338123","nextPostId":"5befded1-4081-5901-a8a5-44c67caa1346"}},
    "staticQueryHashes": ["1632011873","2841359383"]}