{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2011-02-02-execute-time-and-plot-c-programs-with-python/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Stonelinks"}},"markdownRemark":{"id":"64ca9ec0-72d2-5564-9ba6-097ddad6a7bb","excerpt":"Hate excel? Why not have python take all the pain away! This should appeal to everyone out there who needs a quick way to analyze the runtime time of a bunch ofâ€¦","html":"<p><img src=\"/posts/execute-time-and-plot-c-programs-with-python/Fig.png\" alt=\"\"></p>\n<p>Hate excel? Why not have python take all the pain away! This should appeal to everyone out there who needs a quick way to analyze the runtime time of a bunch of commands to a program given an arbitrary list of arguments. Hating excel/openoffice/spreadsheets in general is optional.</p>\n<p>Just like every programmer, I am always trying to find new and interesting ways of automating routine tasks. To that end, I wrote a pretty cool program last night to help automate my first algorithms lab which consisted of many repeated calls to the same program on the command line.</p>\n<p>Consistent with the recent trend of mine, I wrote this in python and makes use of the <a href=\"http://docs.python.org/library/subprocess.html\">subprocess</a> module to spawn and time instances of my C++ program and <a href=\"http://matplotlib.sourceforge.net/\">pylab</a> to make plotting the times super easy. The comments in my code explain things in more detail, but here is the summary: Python is being used to execute two programs written in C++ with the same set of arguments and spits out a plot of their times. In this case the two C++ programs are recursive (rfib) and iterative (ifib) implementations of the Fibonacci algorithm. The fun stuff is in the python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> string\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> pylab  <span class=\"token comment\"># matplotlib</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">timerun</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'Starting timed execution of '</span> <span class=\"token operator\">+</span> program <span class=\"token operator\">+</span> <span class=\"token string\">' with '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' arguments.'</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># Execute program, once for each n argument</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> args <span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># This was really annoying. Build the arguments to the time system call to the time command.</span>\n        <span class=\"token comment\"># First of all, for whatever reason 'time' didn't work correctly with any arguments other than -p,</span>\n        <span class=\"token comment\"># so I used /usr/bin/time instead. Since I could not figure out why the output of 'time' was not</span>\n        <span class=\"token comment\"># coming back to stdin, I use the -o (output file) and -a (append) option to just output the real</span>\n        <span class=\"token comment\"># execution time ( thats where '-f' and '%e' comes from ) to the file.</span>\n        p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'/usr/bin/time'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runtimes.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./'</span> <span class=\"token operator\">+</span> program<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Read back from stdin, print where we are (not required, but its nice)</span>\n        output <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">':\\tfib('</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">') = '</span> <span class=\"token operator\">+</span> output<span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'done'</span>\n\n    <span class=\"token comment\"># Open up, read and return the times in the output file</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'runtimes.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n    times <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Clean up old runtimes</span>\n    subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'rm'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runtimes.txt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> times\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Arguments we are interested in testing runtimes for</span>\n    <span class=\"token comment\"># args = 1, 5, 10, 15, 20, 25, 30, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48</span>\n    args <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Compute the runtimes of the recursive algorithm, then the iterative one</span>\n    rtimes <span class=\"token operator\">=</span> timerun<span class=\"token punctuation\">(</span><span class=\"token string\">'rfib'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n    itimes <span class=\"token operator\">=</span> timerun<span class=\"token punctuation\">(</span><span class=\"token string\">'ifib'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Plot it with pylab</span>\n    pylab<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span>\n    pylab<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Time to compute fib(N) (seconds)'</span><span class=\"token punctuation\">)</span>\n    pylab<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Recursive vs. Iterative Execution Time for Fibionacci Sequence'</span><span class=\"token punctuation\">)</span>\n    pylab<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> rtimes<span class=\"token punctuation\">,</span> <span class=\"token string\">'ro-'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Recursive'</span><span class=\"token punctuation\">)</span>\n    pylab<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> itimes<span class=\"token punctuation\">,</span> <span class=\"token string\">'bo-'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Iterative'</span><span class=\"token punctuation\">)</span>\n    pylab<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># other drawing styles for plots in pylab:</span>\n    <span class=\"token comment\"># 'r' red line, 'g' green line, 'y' yellow line</span>\n    <span class=\"token comment\"># 'ro' red dots as markers, 'r.' smaller red dots, 'r+' red pluses</span>\n    <span class=\"token comment\"># 'r--' red dashed line, 'g^' green triangles, 'bs' blue squares</span>\n    <span class=\"token comment\"># 'rp' red pentagons, 'r1', 'r2', 'r3', 'r4' well, check out the markers</span>\n\n    <span class=\"token comment\"># save the plot as a PNG image</span>\n    pylab<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">'Fig.png'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># show the pylab plot window</span>\n    pylab<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Execute, Time and Plot C++ Programs with Python","date":"February 02, 2011","description":null}},"previous":{"fields":{"slug":"/2011-01-25-rudimentary-gmailbased-print-server/"},"frontmatter":{"title":"Rudimentary Gmail-based Print Server"}},"next":{"fields":{"slug":"/2011-03-13-active-face-tracking-with-stonebot/"},"frontmatter":{"title":"Face Tracking with Stonebot"}}},"pageContext":{"id":"64ca9ec0-72d2-5564-9ba6-097ddad6a7bb","previousPostId":"d9f5719f-dc80-5396-bc0a-1affb1e44fe1","nextPostId":"014e86dc-0612-5379-972b-503cc3686a49"}},
    "staticQueryHashes": ["1632011873","2841359383"]}