{"version":3,"file":"component---src-pages-index-tsx-2f5e5dc4ca699938049c.js","mappings":"+IA6EA,IAlEY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAoBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,uBACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,gBAAC,WAAD,KACE,yCACa,8BAASb,EAAOa,MAD7B,KAC8Cb,EAAOc,aAErD,2BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAG,SAAT,SADF,MAGE,gBAAC,EAAAD,KAAD,CAAMC,GAAE,+BAAyBb,MAAAA,OAAA,EAAAA,EAAQc,UAAR,KAAjC,WAHF,MAOE,gBAAC,EAAAF,KAAD,CAAMC,GAAE,8BAAwBb,MAAAA,OAAA,EAAAA,EAAQe,SAAR,KAAhC,UAPF,MAWE,gBAAC,EAAAH,KAAD,CAAMC,GAAE,uCAAiCb,MAAAA,OAAA,EAAAA,EAAQgB,WAAR,KAAzC,YAXF,MAeE,gBAAC,EAAAJ,KAAD,CAAMC,GAAE,qCAA+Bb,MAAAA,OAAA,EAAAA,EAAQiB,UAAR,KAAvC,gB,kFChBZ,UA5CkB,SAAC,GAAwB,IAAD,EAArBtB,EAAqB,EAArBA,KAAMuB,EAAe,EAAfA,SACnBC,GAAY,UAAAxB,EAAKG,KAAKC,oBAAV,eAAwBqB,QAAxB,QACZC,EAAQ1B,EAAK2B,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAII,MAAO,CAAEC,UAAU,SACpBJ,EAAMK,KAAI,SAAAC,GACT,IAAMP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACE7B,UAAU,iBACV+B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAArB,KAAD,CAAMC,GAAIc,EAAKE,OAAOC,KAAMI,SAAS,OACnC,wBAAMA,SAAS,YAAYd,KAG/B,6BAAQO,EAAKC,YAAYO,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQV,EAAKC,YAAYjB,aAAegB,EAAKW,SAE/CJ,SAAS,0B","sources":["webpack://stonelinks/./src/components/bio.tsx","webpack://stonelinks/./src/pages/index.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            description\n          }\n          social {\n            twitter\n            github\n            linkedin\n            youtube\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/author.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <React.Fragment>\n          <div>\n            Written by <strong>{author.name}</strong>, {author.description}\n          </div>\n          <div>\n            <Link to=\"/todo\">About</Link>\n            {` | `}\n            <Link to={`https://twitter.com/${social?.twitter || ``}`}>\n              Twitter\n            </Link>\n            {` | `}\n            <Link to={`https://github.com/${social?.github || ``}`}>\n              Github\n            </Link>\n            {` | `}\n            <Link to={`http://www.linkedin.com/pub/${social?.linkedin || ``}`}>\n              Linkedin\n            </Link>\n            {` | `}\n            <Link to={`https://www.youtube.com/c/${social?.youtube || ``}`}>\n              Youtube\n            </Link>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","description","Link","to","twitter","github","linkedin","youtube","location","siteTitle","title","posts","allMarkdownRemark","nodes","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}