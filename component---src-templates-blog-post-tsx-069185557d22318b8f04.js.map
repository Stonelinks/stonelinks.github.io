{"version":3,"file":"component---src-templates-blog-post-tsx-069185557d22318b8f04.js","mappings":"6IA6EA,IAlEY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAoBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,uBACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,gBAAC,WAAD,KACE,yCACa,8BAASb,EAAOa,MAD7B,KAC8Cb,EAAOc,aAErD,2BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAG,SAAT,SADF,MAGE,gBAAC,EAAAD,KAAD,CAAMC,GAAE,+BAAyBb,MAAAA,OAAA,EAAAA,EAAQc,UAAR,KAAjC,WAHF,MAOE,gBAAC,EAAAF,KAAD,CAAMC,GAAE,8BAAwBb,MAAAA,OAAA,EAAAA,EAAQe,SAAR,KAAhC,UAPF,MAWE,gBAAC,EAAAH,KAAD,CAAMC,GAAE,uCAAiCb,MAAAA,OAAA,EAAAA,EAAQgB,WAAR,KAAzC,YAXF,MAeE,gBAAC,EAAAJ,KAAD,CAAMC,GAAE,qCAA+Bb,MAAAA,OAAA,EAAAA,EAAQiB,UAAR,KAAvC,gB,kFCDZ,UA3DyB,SAAC,GAAwB,IAAD,EAArBtB,EAAqB,EAArBA,KAAMuB,EAAe,EAAfA,SAC1BC,EAAOxB,EAAKyB,eACZC,GAAY,UAAA1B,EAAKG,KAAKC,oBAAV,eAAwBuB,QAAxB,QACVC,EAAmB5B,EAAnB4B,SAAUC,EAAS7B,EAAT6B,KAElB,OACE,gBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,gBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBX,YAAaQ,EAAKM,YAAYd,aAAeQ,EAAKO,UAEpD,2BACEzB,UAAU,YACV0B,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYV,EAAKM,YAAYH,OAC1C,yBAAIH,EAAKM,YAAYK,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQb,EAAKc,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAK5B,UAAU,iBACb,sBACEiC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGhB,GACC,gBAAC,EAAAX,KAAD,CAAMC,GAAIU,EAASiB,OAAOC,KAAMC,IAAI,QAApC,KACKnB,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAZ,KAAD,CAAMC,GAAIW,EAAKgB,OAAOC,KAAMC,IAAI,QAC7BlB,EAAKC,YAAYH,MADpB,Y","sources":["webpack://stonelinks/./src/components/bio.tsx","webpack://stonelinks/./src/templates/blog-post.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            description\n          }\n          social {\n            twitter\n            github\n            linkedin\n            youtube\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/author.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <React.Fragment>\n          <div>\n            Written by <strong>{author.name}</strong>, {author.description}\n          </div>\n          <div>\n            <Link to=\"/todo\">About</Link>\n            {` | `}\n            <Link to={`https://twitter.com/${social?.twitter || ``}`}>\n              Twitter\n            </Link>\n            {` | `}\n            <Link to={`https://github.com/${social?.github || ``}`}>\n              Github\n            </Link>\n            {` | `}\n            <Link to={`http://www.linkedin.com/pub/${social?.linkedin || ``}`}>\n              Linkedin\n            </Link>\n            {` | `}\n            <Link to={`https://www.youtube.com/c/${social?.youtube || ``}`}>\n              Youtube\n            </Link>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","description","Link","to","twitter","github","linkedin","youtube","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}